#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_NODES 1000

// Define the adjacency list structure for the graph
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Define the queue for BFS
typedef struct Queue {
    int front, rear, size;
    unsigned capacity;
    int* array;
} Queue;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to create a queue
Queue* createQueue(unsigned capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;
    queue->capacity = capacity;
    queue->array = (int*)malloc(queue->capacity * sizeof(int));
    return queue;
}

// Function to check if the queue is empty
bool isEmpty(Queue* queue) {
    return (queue->size == 0);
}

// Function to enqueue an element
void enqueue(Queue* queue, int item) {
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    queue->size++;
}

// Function to dequeue an element
int dequeue(Queue* queue) {
    if (isEmpty(queue))
        return -1;
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size--;
    return item;
}

// Function to perform BFS and calculate distances
void BFS(int start, int n, Node* graph[], int distance[]) {
    bool visited[MAX_NODES];
    for (int i = 1; i <= n; i++) {
        visited[i] = false;
        distance[i] = -1;
    }

    Queue* queue = createQueue(n);
    visited[start] = true;
    distance[start] = 0;
    enqueue(queue, start);

    while (!isEmpty(queue)) {
        int current = dequeue(queue);

        Node* temp = graph[current];
        while (temp != NULL) {
            int neighbor = temp->data;
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                distance[neighbor] = distance[current] + 2;
                enqueue(queue, neighbor);
            }
            temp = temp->next;
        }
    }
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);

    Node* graph[MAX_NODES];
    for (int i = 1; i <= n; i++) {
        graph[i] = NULL;
    }

    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);

        Node* newNode1 = createNode(v);
        newNode1->next = graph[u];
        graph[u] = newNode1;

        Node* newNode2 = createNode(u);
        newNode2->next = graph[v];
        graph[v] = newNode2;
    }

    int start;
    scanf("%d", &start);

    int distance[MAX_NODES];
    BFS(start, n, graph, distance);

    // Printing BFS traversal
    printf("BFS Traversal: %d", start);
    Queue* queue = createQueue(n);
    enqueue(queue, start);
    bool visited[MAX_NODES];
    for (int i = 1; i <= n; i++) {
        visited[i] = false;
    }
    visited[start] = true;
    while (!isEmpty(queue)) {
        int current = dequeue(queue);
        Node* temp = graph[current];
        while (temp != NULL) {
            int neighbor = temp->data;
            if (!visited[neighbor]) {
                printf(" %d", neighbor);
                visited[neighbor] = true;
                enqueue(queue, neighbor);
            }
            temp = temp->next;
        }
    }
    printf("\n");

    // Printing distances
    printf("Distance [");
    for (int i = 1; i <= n; i++) {
        if (i > 1) {
            printf(" ");
        }
        printf("%d", distance[i]);
    }
    printf("]\n");

    return 0;
}
